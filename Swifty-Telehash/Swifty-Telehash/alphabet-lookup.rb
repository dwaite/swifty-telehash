#!/usr/bin/ruby

alphabet = "abcdefghijklmnopqrstuvwxyz234567"
array = []

# set the default value to -1, aka not found/ignore
(0..127).each { |i| array[i] = -1 }

alphabet.each_byte.each_with_index do |idx, byte| array[idx] = byte; end

# set the uppercase version of the letters
alphabet.upcase.each_byte.each_with_index do |idx, byte| array[idx] = byte; end

# set well-known typos

array['1'.getbyte(0)] = alphabet.index('l')
array['8'.getbyte(0)] = alphabet.index('b')

# set padding-character
array['='.getbyte(0)] = -2

# set whitespace
array[ ' '.getbyte(0)] = -3
array["\r".getbyte(0)] = -3
array["\n".getbyte(0)] = -3
array["\t".getbyte(0)] = -3

puts <<EOH

// Swift file generated by #{$0}
// Do not edit this generated content directly

internal enum Base32DictionaryEntry {
    case Whitespace
    case Padding
    case Invalid
    case Typo(UInt8)
    case Valid(UInt8)
}

internal let Base32LookupDictionary:[Base32DictionaryEntry] = [
EOH

array.each_with_index do |x, idx|
  case idx
  when '1'.getbyte(0), '8'.getbyte(0)
    printf ".Typo(%2d),   ", x
  else
    case x
    when -3
        print ".Whitespace, "
    when -2
        print ".Padding,    "
    when -1
        print ".Invalid,    "
    else
        printf ".Valid(%2d),  ", x
    end
  end
  if (idx % 8) == 7
    print "\n"
  end
end
puts <<EOF
]
EOF
